version: '3.9'

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami/zookeeper'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - tg_cluster_kafka_network
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '127.0.0.1:29092:29092' # Доступ к Kafka с хоста через localhost:9092 для локального доступа
      - '9092:9092' # Открытие порта 9092 для внутренних подключений Docker
      - '9093:9093' # Для доступа с хоста, если необходимо для внешних подключений
    volumes:
      - 'kafka_data:/bitnami/kafka' # Хранение данных Kafka на постоянном томе
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # Настройка прослушиваемых адресов и протоколов для внутренних и внешних подключений
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS}
      # Рекламирование адресов для клиентов. Используйте внешний IP VPS для PLAINTEXT_HOST при развертывании на VPS
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true # Автоматическое создание топиков при обращении к несуществующим
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true # Разрешение удаления топиков
    networks:
      - tg_cluster_kafka_network
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
    networks:
      - tg_cluster_kafka_network

networks:
  tg_cluster_kafka_network:
    external: true

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  cmak_data:
    driver: local
